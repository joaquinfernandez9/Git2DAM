package dao;

import com.google.gson.Gson;
import com.mongodb.client.*;
import config.JPAUtil;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.EntityTransaction;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;
import model.hibernate.*;
import org.bson.Document;
import org.bson.types.ObjectId;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class DaoOrders {

    private final JPAUtil jpautil;
    private EntityManager em;
    private final MongoCollection<Document> col;
    private final Gson gson;

    @Inject
    public DaoOrders(JPAUtil jpautil, Gson gson) {
        this.jpautil = jpautil;
        this.gson = gson;
        MongoClient mongoClient = MongoClients.create("mongodb://root:root@localhost:27017/");
        MongoDatabase db = mongoClient.getDatabase("exam");
        this.col = db.getCollection("examOrders");
    }


    public int add(Order order) {
        //the customer sittion at table 2, with email 'johndoe@example.com',
        //orders 1 steak adn 1 salmon (in only one order).
        //Update the database
        em = jpautil.getEntityManager();
        EntityTransaction tx = em.getTransaction();
        int orderId;
        try {
            tx.begin();
//            Order managedOrder = em.merge(order);
//            em.persist(managedOrder);
//            orderId = managedOrder.getId();
            em.persist(order);
            orderId = order.getId();

            //obtain the items that had been ordered
            List<OrderItems> orderItems = em.createQuery("SELECT DISTINCT oi FROM OrderItems oi WHERE oi.order.id = :orderId", OrderItems.class)
                    .setParameter("orderId", orderId)
                    .getResultList();

            //calculate the total price of the order
            double total = 0.0;
            for (OrderItems oi : orderItems) {
                total += oi.getPrice() * oi.getQuantity();
            }
            order.setTotal(total);
            em.merge(order);  //update with the result

            tx.commit();
        } catch (Exception e) {
            if (tx != null && tx.isActive()) {
                tx.rollback();
            }
            e.printStackTrace();
            orderId = -1;
        } finally {
            em.close();
        }
        return orderId;
    }

    //get all orders of a customer
    public List<Order> getAll(Customer customer) {
        List<Order> response = Collections.emptyList();
        em = jpautil.getEntityManager();
        try {
            response = em.createQuery("select o from Order o where customer.id =: id", Order.class)
                    .setParameter("id", customer.id)
                    .getResultList();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            em.close();
        }
        return response;
    }

    /*
    Generate a new collection examOrders using the mySQL data. Each order will have:
        a) Id (autogenerated by Mongo) and the date of the order
        b) An object customer, with the name and email of the client
        c) An array of menu_items ordered, with the quantity, the name and the price of the item
     */

    //get all the data from the table orders and write it into a mongo collection with that instructions

    //get all orders
    public List<Order> getAll() {
        List<Order> response = Collections.emptyList();
        em = jpautil.getEntityManager();

        try {
            response = em.createQuery("select o from Order o ", Order.class)
                    .getResultList();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            em.close();
        }
        return response;
    }

    public int trasnferData() {
        int count = 0;
        em = jpautil.getEntityManager();
        EntityTransaction tx = em.getTransaction();
        try {
            tx.begin();
            CriteriaBuilder cb = em.getCriteriaBuilder();
            CriteriaQuery<Order> query = cb.createQuery(Order.class);
            Root<Order> orderRoot = query.from(Order.class);
            query.select(orderRoot);
            TypedQuery<Order> typedQuery = em.createQuery(query);
            List<Order> orders = typedQuery.getResultList();
            for (Order order : orders) {
                Document doc = new Document();
                // set id as autogenerated by MongoDB
                ObjectId id = new ObjectId();
                doc.append("_id", id);
                // set date
                doc.append("date", order.getOrderDate());
                // set customer
                Customer customer = order.getCustomer();
                Document customerDoc = new Document()
                        .append("name", customer.getFirstName() + " " + customer.getLastName())
                        .append("email", customer.getEmail());
                doc.append("customer", customerDoc);
                // set menu_items
                List<OrderItems> orderItems = (List<OrderItems>) order.getOrderItems();
                List<Document> menuItemsDocs = new ArrayList<>();
                for (OrderItems orderItem : orderItems) {
                    MenuItem menuItem = orderItem.getMenuItem();
                    Document menuItemDoc = new Document()
                            .append("quantity", orderItem.getQuantity())
                            .append("name", menuItem.getName())
                            .append("price", menuItem.getPrice());
                    menuItemsDocs.add(menuItemDoc);
                }
                doc.append("menu_items", menuItemsDocs);
                // insert document into examOrders collection
                String json = gson.toJson(doc);
                col.insertOne(Document.parse(json));
                count++;
            }
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null && tx.isActive()) {
                tx.rollback();
            }
            count = -1;
        } finally {
            em.close();
        }
        return count;
    }


    //Number of steaks ordered by customer (Show the full name of the customer and the total number of steaks per customer)
    public int numSteaksPerCustomer() {
        List<Document> docs = Arrays.asList(new Document("$unwind",
                        new Document("path", "$menu_items_ordered")),
                new Document("$match",
                        new Document("menu_items_ordered.name", "Steak")),
                new Document("$group",
                        new Document("_id",
                                new Document("firstName", "$customer.firstName")
                                        .append("lastName", "$customer.lastName"))
                                .append("totalSteaks",
                                        new Document("$sum", "$menu_items_ordered.quantity"))));
        AggregateIterable<Document> output = col.aggregate(docs);
        List<Document> response = new ArrayList<>();
        for (Document doc : output) {
            response.add(doc);
        }
        return response.get(0).getInteger("totalSteaks");
    }
}
